* CompileModules.jl

This is a small proof-of-concept package that pulls some functions out
of Base/loading.jl and lightly modifies them so that arbitrary modules
(which aren't part of packages) can be precompiled and have their
precompiled ~.ji~ files cached. This allows distributing scripts that
after first-use have their compile-time elided.

To use it on a script, wrap the scripts functionality in a ~module~
with a single function entry (e.g. ~main~). Then, just before the
~module~ put something like:

#+begin_src julia
    using CompileModules

    isinteractive() || ccall(:jl_generating_output, Cint, ()) == 1 || begin
        cache = ensure_compilecache(@__FILE__)
        mods = loadcache(cache)
        first(mods).main(stdout, parse(Int, ARGS[1]))
        exit()
    end#begin
#+end_src

See ~examples/nbody.jl~ for a script that uses these features.

Note that currently this package does not check whether a module's
dependencies have been updated. If dependencies have been updated, the
~.ji~ file must be recompiled.
