* CompileModules.jl

This is a small proof-of-concept package that pulls some functions out
of Base/loading.jl and lightly modifies them so that arbitrary modules
(which aren't part of packages) can be precompiled and have their
precompiled ~.ji~ files cached. This allows distributing scripts that
after first-use have their compile-time elided.

To use it on a script, wrap the scripts functionality in a ~module~
with a single function entry (e.g. ~main~). Then, after the end of the
~module~ put something like:

#+begin_src julia
    using CompileModules

    isinteractive() || ccall(:jl_generating_output, Cint, ()) == 1 || begin
        ensure_compilecache(@__FILE__)
        loadcache(@__FILE__)
        NBodyAB.main(stdout, parse(Int, ARGS[1]))
    end#begin
#+end_src

See ~examples/nbody.jl~ for a script that uses these features.

Note that currently this package does not track whether a script has
been modified to force recompilation of cache. If a script is
modified, the ~.ji~ file should be manually deleted.
